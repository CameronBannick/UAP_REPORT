{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "collapsed_sections": [],
      "authorship_tag": "ABX9TyNfYmrjYQWnv18ani7hffqn",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/CameronBannick/Uap_prediction/blob/main/UFO%20Prediction%20Model%20(Final)\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 1. Data Cleaning"
      ],
      "metadata": {
        "id": "pwusdnwZZNhj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nZK2S6x2Y4kb",
        "outputId": "141b0201-367c-4d5d-a5c0-8b127b4f60fc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ],
      "source": [
        "#importing libaries\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "from sklearn.model_selection import train_test_split, GridSearchCV\n",
        "from sklearn.compose import make_column_transformer, make_column_selector\n",
        "from sklearn.pipeline import make_pipeline\n",
        "from sklearn.preprocessing import StandardScaler, OneHotEncoder\n",
        "from sklearn.neighbors import KNeighborsClassifier\n",
        "from sklearn.impute import SimpleImputer\n",
        "from sklearn.metrics import classification_report\n",
        "from sklearn.tree import DecisionTreeClassifier\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn import set_config\n",
        "set_config(display='diagram')\n",
        "\n",
        "\n",
        "from google.colab import drive\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#import data\n",
        "df = pd.read_csv('/content/drive/MyDrive/Coding Dojo/Week 7/Data Proposals/nuforc_reports.csv')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 510
        },
        "id": "EPVMfhhAZz-y",
        "outputId": "07a07e33-0b85-4cc2-8524-85b7746ce474"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                             summary        city state  \\\n",
              "0  My wife was driving southeast on a fairly popu...     Chester    VA   \n",
              "1  I think that I may caught a UFO on the NBC Nig...  Rocky Hill    CT   \n",
              "2  I woke up late in the afternoon 3:30-4pm. I we...         NaN   NaN   \n",
              "3  I was driving towards the intersection of fall...      Ottawa    ON   \n",
              "4  In Peoria Arizona, I saw a cigar shaped craft ...      Peoria    NY   \n",
              "\n",
              "             date_time     shape     duration  \\\n",
              "0  2019-12-12T18:43:00     light    5 seconds   \n",
              "1  2019-03-22T18:30:00    circle  3-5 seconds   \n",
              "2                  NaN       NaN          NaN   \n",
              "3  2019-04-17T02:00:00  teardrop   10 seconds   \n",
              "4  2009-03-15T18:00:00     cigar    2 minutes   \n",
              "\n",
              "                                               stats  \\\n",
              "0  Occurred : 12/12/2019 18:43  (Entered as : 12/...   \n",
              "1  Occurred : 3/22/2019 18:30  (Entered as : 03/2...   \n",
              "2  Occurred : 4/1/2019 15:45  (Entered as : April...   \n",
              "3  Occurred : 4/17/2019 02:00  (Entered as : 04-1...   \n",
              "4  Occurred : 3/15/2009 18:00  (Entered as : 03/1...   \n",
              "\n",
              "                                         report_link  \\\n",
              "0  http://www.nuforc.org/webreports/151/S151739.html   \n",
              "1  http://www.nuforc.org/webreports/145/S145297.html   \n",
              "2  http://www.nuforc.org/webreports/145/S145556.html   \n",
              "3  http://www.nuforc.org/webreports/145/S145697.html   \n",
              "4  http://www.nuforc.org/webreports/145/S145723.html   \n",
              "\n",
              "                                                text               posted  \\\n",
              "0  My wife was driving southeast on a fairly popu...  2019-12-22T00:00:00   \n",
              "1  I think that I may caught a UFO on the NBC Nig...  2019-03-29T00:00:00   \n",
              "2  I woke up late in the afternoon 3:30-4pm.  I w...                  NaN   \n",
              "3  I was driving towards the intersection of fall...  2019-04-18T00:00:00   \n",
              "4  In Peoria, Arizona, I saw a cigar shaped craft...  2019-04-18T00:00:00   \n",
              "\n",
              "   city_latitude  city_longitude  \n",
              "0      37.343152      -77.408582  \n",
              "1      41.664800      -72.639300  \n",
              "2            NaN             NaN  \n",
              "3      45.381383      -75.708501  \n",
              "4            NaN             NaN  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-236e999a-3c23-4c2a-b555-53db050809f6\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>summary</th>\n",
              "      <th>city</th>\n",
              "      <th>state</th>\n",
              "      <th>date_time</th>\n",
              "      <th>shape</th>\n",
              "      <th>duration</th>\n",
              "      <th>stats</th>\n",
              "      <th>report_link</th>\n",
              "      <th>text</th>\n",
              "      <th>posted</th>\n",
              "      <th>city_latitude</th>\n",
              "      <th>city_longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>My wife was driving southeast on a fairly popu...</td>\n",
              "      <td>Chester</td>\n",
              "      <td>VA</td>\n",
              "      <td>2019-12-12T18:43:00</td>\n",
              "      <td>light</td>\n",
              "      <td>5 seconds</td>\n",
              "      <td>Occurred : 12/12/2019 18:43  (Entered as : 12/...</td>\n",
              "      <td>http://www.nuforc.org/webreports/151/S151739.html</td>\n",
              "      <td>My wife was driving southeast on a fairly popu...</td>\n",
              "      <td>2019-12-22T00:00:00</td>\n",
              "      <td>37.343152</td>\n",
              "      <td>-77.408582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>I think that I may caught a UFO on the NBC Nig...</td>\n",
              "      <td>Rocky Hill</td>\n",
              "      <td>CT</td>\n",
              "      <td>2019-03-22T18:30:00</td>\n",
              "      <td>circle</td>\n",
              "      <td>3-5 seconds</td>\n",
              "      <td>Occurred : 3/22/2019 18:30  (Entered as : 03/2...</td>\n",
              "      <td>http://www.nuforc.org/webreports/145/S145297.html</td>\n",
              "      <td>I think that I may caught a UFO on the NBC Nig...</td>\n",
              "      <td>2019-03-29T00:00:00</td>\n",
              "      <td>41.664800</td>\n",
              "      <td>-72.639300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>I woke up late in the afternoon 3:30-4pm. I we...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>Occurred : 4/1/2019 15:45  (Entered as : April...</td>\n",
              "      <td>http://www.nuforc.org/webreports/145/S145556.html</td>\n",
              "      <td>I woke up late in the afternoon 3:30-4pm.  I w...</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>I was driving towards the intersection of fall...</td>\n",
              "      <td>Ottawa</td>\n",
              "      <td>ON</td>\n",
              "      <td>2019-04-17T02:00:00</td>\n",
              "      <td>teardrop</td>\n",
              "      <td>10 seconds</td>\n",
              "      <td>Occurred : 4/17/2019 02:00  (Entered as : 04-1...</td>\n",
              "      <td>http://www.nuforc.org/webreports/145/S145697.html</td>\n",
              "      <td>I was driving towards the intersection of fall...</td>\n",
              "      <td>2019-04-18T00:00:00</td>\n",
              "      <td>45.381383</td>\n",
              "      <td>-75.708501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>In Peoria Arizona, I saw a cigar shaped craft ...</td>\n",
              "      <td>Peoria</td>\n",
              "      <td>NY</td>\n",
              "      <td>2009-03-15T18:00:00</td>\n",
              "      <td>cigar</td>\n",
              "      <td>2 minutes</td>\n",
              "      <td>Occurred : 3/15/2009 18:00  (Entered as : 03/1...</td>\n",
              "      <td>http://www.nuforc.org/webreports/145/S145723.html</td>\n",
              "      <td>In Peoria, Arizona, I saw a cigar shaped craft...</td>\n",
              "      <td>2019-04-18T00:00:00</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-236e999a-3c23-4c2a-b555-53db050809f6')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-236e999a-3c23-4c2a-b555-53db050809f6 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-236e999a-3c23-4c2a-b555-53db050809f6');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#seeing info on all data\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mfrqmk8ra7jE",
        "outputId": "64dc9ff4-0ce3-49a2-c586-49a87b982538"
      },
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 88125 entries, 0 to 88124\n",
            "Data columns (total 12 columns):\n",
            " #   Column          Non-Null Count  Dtype  \n",
            "---  ------          --------------  -----  \n",
            " 0   summary         88095 non-null  object \n",
            " 1   city            87891 non-null  object \n",
            " 2   state           82890 non-null  object \n",
            " 3   date_time       86938 non-null  object \n",
            " 4   shape           85627 non-null  object \n",
            " 5   duration        84954 non-null  object \n",
            " 6   stats           88088 non-null  object \n",
            " 7   report_link     88125 non-null  object \n",
            " 8   text            88070 non-null  object \n",
            " 9   posted          86938 non-null  object \n",
            " 10  city_latitude   72013 non-null  float64\n",
            " 11  city_longitude  72013 non-null  float64\n",
            "dtypes: float64(2), object(10)\n",
            "memory usage: 8.1+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#check for duplicates\n",
        "df.duplicated().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "5Qq8uv4-ciAA",
        "outputId": "4a6a03d3-59d7-4546-fff1-65ffd3fab979"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#removing unneccesary columns\n",
        "df = df.drop(columns=['summary', 'stats', 'report_link', 'text', 'posted', 'city', 'duration'])\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "FKOBJ4HXc6VP",
        "outputId": "e931568b-8d2e-4b82-d0ed-5f6ad95a414b"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  state            date_time     shape  city_latitude  city_longitude\n",
              "0    VA  2019-12-12T18:43:00     light      37.343152      -77.408582\n",
              "1    CT  2019-03-22T18:30:00    circle      41.664800      -72.639300\n",
              "2   NaN                  NaN       NaN            NaN             NaN\n",
              "3    ON  2019-04-17T02:00:00  teardrop      45.381383      -75.708501\n",
              "4    NY  2009-03-15T18:00:00     cigar            NaN             NaN"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8e3cbe09-325c-479c-bda8-a9df87263b70\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>date_time</th>\n",
              "      <th>shape</th>\n",
              "      <th>city_latitude</th>\n",
              "      <th>city_longitude</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>VA</td>\n",
              "      <td>2019-12-12T18:43:00</td>\n",
              "      <td>light</td>\n",
              "      <td>37.343152</td>\n",
              "      <td>-77.408582</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CT</td>\n",
              "      <td>2019-03-22T18:30:00</td>\n",
              "      <td>circle</td>\n",
              "      <td>41.664800</td>\n",
              "      <td>-72.639300</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ON</td>\n",
              "      <td>2019-04-17T02:00:00</td>\n",
              "      <td>teardrop</td>\n",
              "      <td>45.381383</td>\n",
              "      <td>-75.708501</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NY</td>\n",
              "      <td>2009-03-15T18:00:00</td>\n",
              "      <td>cigar</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e3cbe09-325c-479c-bda8-a9df87263b70')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8e3cbe09-325c-479c-bda8-a9df87263b70 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8e3cbe09-325c-479c-bda8-a9df87263b70');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#checking values for Y\n",
        "df['shape'].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ejgVzID0gJJu",
        "outputId": "3454ef99-5e88-4365-b940-ba2bc7ffaa50"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "light        18230\n",
              "circle       10130\n",
              "triangle      7910\n",
              "fireball      7095\n",
              "unknown       6182\n",
              "sphere        6065\n",
              "other         5749\n",
              "disk          4522\n",
              "oval          3857\n",
              "formation     2842\n",
              "changing      2112\n",
              "cigar         1990\n",
              "flash         1675\n",
              "rectangle     1597\n",
              "cylinder      1374\n",
              "diamond       1273\n",
              "chevron        953\n",
              "teardrop       767\n",
              "egg            666\n",
              "cone           349\n",
              "cross          289\n",
              "Name: shape, dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#inspecting object data\n",
        "dtypes = df.dtypes\n",
        "str_cols = dtypes[dtypes=='object'].index\n",
        "str_cols"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cYiqsQEXORmf",
        "outputId": "992eb590-bca1-41d8-b172-4607aa3e9383"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Index(['state', 'date_time', 'shape'], dtype='object')"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "for col in str_cols:\n",
        "    print(f\"- Column= {col}\")\n",
        "    print(df[col].value_counts(dropna=False))\n",
        "    print('\\n\\n')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "81lOk2SC34tY",
        "outputId": "e8645c66-2098-4020-ed45-41bb084bf0b1"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "- Column= state\n",
            "CA     9506\n",
            "FL     5294\n",
            "NaN    5235\n",
            "WA     3856\n",
            "TX     3481\n",
            "       ... \n",
            "YT       17\n",
            "PE       13\n",
            "NT       10\n",
            "PR        2\n",
            "QB        1\n",
            "Name: state, Length: 66, dtype: int64\n",
            "\n",
            "\n",
            "\n",
            "- Column= date_time\n",
            "NaN                    1187\n",
            "2015-11-07T18:00:00     104\n",
            "2014-07-04T22:00:00      46\n",
            "2010-07-04T22:00:00      37\n",
            "2012-07-04T22:00:00      34\n",
            "                       ... \n",
            "2011-07-23T23:20:00       1\n",
            "2011-07-23T23:47:00       1\n",
            "2011-07-24T00:00:00       1\n",
            "2011-07-24T00:02:00       1\n",
            "2019-12-12T18:43:00       1\n",
            "Name: date_time, Length: 73123, dtype: int64\n",
            "\n",
            "\n",
            "\n",
            "- Column= shape\n",
            "light        18230\n",
            "circle       10130\n",
            "triangle      7910\n",
            "fireball      7095\n",
            "unknown       6182\n",
            "sphere        6065\n",
            "other         5749\n",
            "disk          4522\n",
            "oval          3857\n",
            "formation     2842\n",
            "NaN           2498\n",
            "changing      2112\n",
            "cigar         1990\n",
            "flash         1675\n",
            "rectangle     1597\n",
            "cylinder      1374\n",
            "diamond       1273\n",
            "chevron        953\n",
            "teardrop       767\n",
            "egg            666\n",
            "cone           349\n",
            "cross          289\n",
            "Name: shape, dtype: int64\n",
            "\n",
            "\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#function engineering with Datetime\n",
        "df['date_time']=pd.to_datetime(df['date_time'])\n",
        "df.info()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Wq6iFE5ahSUW",
        "outputId": "adae4d1b-1ac3-4a0e-c299-d3b57c004014"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 88125 entries, 0 to 88124\n",
            "Data columns (total 5 columns):\n",
            " #   Column          Non-Null Count  Dtype         \n",
            "---  ------          --------------  -----         \n",
            " 0   state           82890 non-null  object        \n",
            " 1   date_time       86938 non-null  datetime64[ns]\n",
            " 2   shape           85627 non-null  object        \n",
            " 3   city_latitude   72013 non-null  float64       \n",
            " 4   city_longitude  72013 non-null  float64       \n",
            "dtypes: datetime64[ns](1), float64(2), object(2)\n",
            "memory usage: 3.4+ MB\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df['year']= df['date_time'].dt.year\n",
        "df['month (name)']=df['date_time'].dt.month_name()\n",
        "df['day of week (name)']=df['date_time'].dt.day_name()\n",
        "df.head()\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xt8o4buviqZA",
        "outputId": "a78f5256-0889-46ea-c90a-43efca45a4d6"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  state           date_time     shape  city_latitude  city_longitude    year  \\\n",
              "0    VA 2019-12-12 18:43:00     light      37.343152      -77.408582  2019.0   \n",
              "1    CT 2019-03-22 18:30:00    circle      41.664800      -72.639300  2019.0   \n",
              "2   NaN                 NaT       NaN            NaN             NaN     NaN   \n",
              "3    ON 2019-04-17 02:00:00  teardrop      45.381383      -75.708501  2019.0   \n",
              "4    NY 2009-03-15 18:00:00     cigar            NaN             NaN  2009.0   \n",
              "\n",
              "  month (name) day of week (name)  \n",
              "0     December           Thursday  \n",
              "1        March             Friday  \n",
              "2          NaN                NaN  \n",
              "3        April          Wednesday  \n",
              "4        March             Sunday  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3284ca91-dab4-41b8-9d9f-5634e7defe9b\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>date_time</th>\n",
              "      <th>shape</th>\n",
              "      <th>city_latitude</th>\n",
              "      <th>city_longitude</th>\n",
              "      <th>year</th>\n",
              "      <th>month (name)</th>\n",
              "      <th>day of week (name)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>VA</td>\n",
              "      <td>2019-12-12 18:43:00</td>\n",
              "      <td>light</td>\n",
              "      <td>37.343152</td>\n",
              "      <td>-77.408582</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>December</td>\n",
              "      <td>Thursday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CT</td>\n",
              "      <td>2019-03-22 18:30:00</td>\n",
              "      <td>circle</td>\n",
              "      <td>41.664800</td>\n",
              "      <td>-72.639300</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>March</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaT</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ON</td>\n",
              "      <td>2019-04-17 02:00:00</td>\n",
              "      <td>teardrop</td>\n",
              "      <td>45.381383</td>\n",
              "      <td>-75.708501</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>April</td>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NY</td>\n",
              "      <td>2009-03-15 18:00:00</td>\n",
              "      <td>cigar</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>March</td>\n",
              "      <td>Sunday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3284ca91-dab4-41b8-9d9f-5634e7defe9b')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3284ca91-dab4-41b8-9d9f-5634e7defe9b button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3284ca91-dab4-41b8-9d9f-5634e7defe9b');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#dropping now redundant date_time column\n",
        "df=df.drop(columns='date_time')\n",
        "df.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "dUQITvyDRaF-",
        "outputId": "fb09496a-3cc5-4206-958b-88d38bffce2b"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  state     shape  city_latitude  city_longitude    year month (name)  \\\n",
              "0    VA     light      37.343152      -77.408582  2019.0     December   \n",
              "1    CT    circle      41.664800      -72.639300  2019.0        March   \n",
              "2   NaN       NaN            NaN             NaN     NaN          NaN   \n",
              "3    ON  teardrop      45.381383      -75.708501  2019.0        April   \n",
              "4    NY     cigar            NaN             NaN  2009.0        March   \n",
              "\n",
              "  day of week (name)  \n",
              "0           Thursday  \n",
              "1             Friday  \n",
              "2                NaN  \n",
              "3          Wednesday  \n",
              "4             Sunday  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7b3abb3f-fe84-4875-afc0-e35d9877e42c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>state</th>\n",
              "      <th>shape</th>\n",
              "      <th>city_latitude</th>\n",
              "      <th>city_longitude</th>\n",
              "      <th>year</th>\n",
              "      <th>month (name)</th>\n",
              "      <th>day of week (name)</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>VA</td>\n",
              "      <td>light</td>\n",
              "      <td>37.343152</td>\n",
              "      <td>-77.408582</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>December</td>\n",
              "      <td>Thursday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>CT</td>\n",
              "      <td>circle</td>\n",
              "      <td>41.664800</td>\n",
              "      <td>-72.639300</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>March</td>\n",
              "      <td>Friday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>ON</td>\n",
              "      <td>teardrop</td>\n",
              "      <td>45.381383</td>\n",
              "      <td>-75.708501</td>\n",
              "      <td>2019.0</td>\n",
              "      <td>April</td>\n",
              "      <td>Wednesday</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>NY</td>\n",
              "      <td>cigar</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>2009.0</td>\n",
              "      <td>March</td>\n",
              "      <td>Sunday</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7b3abb3f-fe84-4875-afc0-e35d9877e42c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-7b3abb3f-fe84-4875-afc0-e35d9877e42c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-7b3abb3f-fe84-4875-afc0-e35d9877e42c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 11
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#drop nan if my future y\n",
        "df=df.dropna(subset=['shape'])\n",
        "df.isna().sum()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Phb3E-9J48F9",
        "outputId": "0b0655d1-d1da-4d33-d3fc-a258b8c0f7a3"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "state                  4946\n",
              "shape                     0\n",
              "city_latitude         15514\n",
              "city_longitude        15514\n",
              "year                   1099\n",
              "month (name)           1099\n",
              "day of week (name)     1099\n",
              "dtype: int64"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Date Visualizations"
      ],
      "metadata": {
        "id": "RhXwPAmwTVVP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,15))\n",
        "sns.countplot(data=df, x='shape')\n",
        "plt.xlabel('UFO Shape')\n",
        "plt.xticks(rotation='vertical')\n",
        "plt.ylabel('Sighting Amount')\n",
        "plt.title('Number of Sightings by Shape')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 949
        },
        "id": "FJpfnKWYANhm",
        "outputId": "e858294d-b3cb-438e-da21-e6d5a25416b1"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Number of Sightings by Shape')"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x1080 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Most people seem to report solely balls of light as the most common 'shape' for UFOs. Folloed by 'circle', 'triangle', and 'fireball'. Note that this question was an open response, so things like 'fireball' and 'light' could be the same phenomenon as well as 'sphere' and 'circle'"
      ],
      "metadata": {
        "id": "DEImiPtPnWyu"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(15,10))\n",
        "sns.countplot(data=df, x='month (name)')\n",
        "plt.xlabel('Month Name')\n",
        "plt.ylabel('Sighting Amount')\n",
        "plt.title('Number of Sightings by Month')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 638
        },
        "id": "OHV61yPcZmdf",
        "outputId": "8ce4c52f-42c8-4514-919e-c32febe5d324"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 1.0, 'Number of Sightings by Month')"
            ]
          },
          "metadata": {},
          "execution_count": 14
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x720 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Our data suggests that UFO sightings are most common between June and October with a slow down in the winter months, while ramping up again as we progress to spring\n",
        "\n"
      ],
      "metadata": {
        "id": "d3Zdt0rIoAm-"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ax = sns.scatterplot(data=df, x='city_latitude', y='city_longitude', hue='shape')\n",
        "\n",
        "ax.legend(bbox_to_anchor=[1,1]);\n",
        "\n",
        "ax.set_title('Latitude/Longitude sighting by Shape')\n",
        "ax.set_xlabel('Latitude')\n",
        "ax.set_ylabel('Longitude')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 387
        },
        "id": "Jf5kxIHdAQNO",
        "outputId": "eeae232f-72f7-4939-a047-ee9014f0ca38"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0, 0.5, 'Longitude')"
            ]
          },
          "metadata": {},
          "execution_count": 15
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "There seems to be no discernable pattern of how each shape is appearing, meaning different shapes don't seem to have their own territory. This implies that since there is no order, there is a possibility their might not be 'one culprit' behind the UFO phenomenae "
      ],
      "metadata": {
        "id": "A2a-bhfko7ch"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Model Selection"
      ],
      "metadata": {
        "id": "PqCeWF2YARog"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#creating a preprocessor \n",
        "X=df.drop(columns='shape')\n",
        "y=df['shape']\n",
        "\n",
        "X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42)"
      ],
      "metadata": {
        "id": "btZnkn99AWRU"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "scaler = StandardScaler()\n",
        "ohe= OneHotEncoder(handle_unknown='ignore')\n",
        "\n",
        "freq_imputer = SimpleImputer(strategy='most_frequent')\n",
        "mean_imputer = SimpleImputer(strategy='mean')\n",
        "\n",
        "num_selector = make_column_selector(dtype_include='number')\n",
        "cat_selector = make_column_selector(dtype_include='object')"
      ],
      "metadata": {
        "id": "2UkYG1mlCEUM"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "num_pipe = make_pipeline(mean_imputer, scaler)\n",
        "cat_pipe = make_pipeline(freq_imputer, ohe)\n",
        "\n",
        "num_tuple = (num_pipe, num_selector)\n",
        "cat_tuple = (cat_pipe, cat_selector)"
      ],
      "metadata": {
        "id": "Fb4gM_m8CtpR"
      },
      "execution_count": 18,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "preprocessor = make_column_transformer(num_tuple, cat_tuple)\n",
        "preprocessor.fit(X_train, y_train)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 153
        },
        "id": "ht0Ii1ZKEWTV",
        "outputId": "11a684eb-d459-43f2-ca38-71c54a6a1f06"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                 Pipeline(steps=[('simpleimputer',\n",
              "                                                  SimpleImputer()),\n",
              "                                                 ('standardscaler',\n",
              "                                                  StandardScaler())]),\n",
              "                                 <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750>),\n",
              "                                ('pipeline-2',\n",
              "                                 Pipeline(steps=[('simpleimputer',\n",
              "                                                  SimpleImputer(strategy='most_frequent')),\n",
              "                                                 ('onehotencoder',\n",
              "                                                  OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                 <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790>)])"
            ],
            "text/html": [
              "<style>#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 {color: black;background-color: white;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 pre{padding: 0;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-toggleable {background-color: white;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-estimator:hover {background-color: #d4ebff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-item {z-index: 1;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 2em;bottom: 0;left: 50%;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel-item {display: flex;flex-direction: column;position: relative;background-color: white;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-parallel-item:only-child::after {width: 0;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;position: relative;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-label label {font-family: monospace;font-weight: bold;background-color: white;display: inline-block;line-height: 1.2em;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-label-container {position: relative;z-index: 2;text-align: center;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-c7719033-ccc6-45f5-a260-ca65debd96a0 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-c7719033-ccc6-45f5-a260-ca65debd96a0\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
              "                                                  SimpleImputer()),\n",
              "                                                 (&#x27;standardscaler&#x27;,\n",
              "                                                  StandardScaler())]),\n",
              "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750&gt;),\n",
              "                                (&#x27;pipeline-2&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
              "                                                  SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",
              "                                                 (&#x27;onehotencoder&#x27;,\n",
              "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
              "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790&gt;)])</pre><b>Please rerun this cell to show the HTML repr or trust the notebook.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"e28b1547-b7ea-48fd-b973-b538aefbac5c\" type=\"checkbox\" ><label for=\"e28b1547-b7ea-48fd-b973-b538aefbac5c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">ColumnTransformer</label><div class=\"sk-toggleable__content\"><pre>ColumnTransformer(transformers=[(&#x27;pipeline-1&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
              "                                                  SimpleImputer()),\n",
              "                                                 (&#x27;standardscaler&#x27;,\n",
              "                                                  StandardScaler())]),\n",
              "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750&gt;),\n",
              "                                (&#x27;pipeline-2&#x27;,\n",
              "                                 Pipeline(steps=[(&#x27;simpleimputer&#x27;,\n",
              "                                                  SimpleImputer(strategy=&#x27;most_frequent&#x27;)),\n",
              "                                                 (&#x27;onehotencoder&#x27;,\n",
              "                                                  OneHotEncoder(handle_unknown=&#x27;ignore&#x27;))]),\n",
              "                                 &lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790&gt;)])</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"13225f59-16fd-4a5f-91fc-fbd4d8bd9b9e\" type=\"checkbox\" ><label for=\"13225f59-16fd-4a5f-91fc-fbd4d8bd9b9e\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-1</label><div class=\"sk-toggleable__content\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750&gt;</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"ca93cb58-ef9e-49b6-8353-685c6bb7bb0e\" type=\"checkbox\" ><label for=\"ca93cb58-ef9e-49b6-8353-685c6bb7bb0e\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer()</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"774d19c7-0ba6-4db2-9c05-421b3c4432f4\" type=\"checkbox\" ><label for=\"774d19c7-0ba6-4db2-9c05-421b3c4432f4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div></div></div></div><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"843b0eaf-0433-4b04-8aea-8f01a3e79c9e\" type=\"checkbox\" ><label for=\"843b0eaf-0433-4b04-8aea-8f01a3e79c9e\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">pipeline-2</label><div class=\"sk-toggleable__content\"><pre>&lt;sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790&gt;</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"eabc4b4c-4f0d-41b4-b43c-54fce6d7327c\" type=\"checkbox\" ><label for=\"eabc4b4c-4f0d-41b4-b43c-54fce6d7327c\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">SimpleImputer</label><div class=\"sk-toggleable__content\"><pre>SimpleImputer(strategy=&#x27;most_frequent&#x27;)</pre></div></div></div><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"7a2b67e5-affa-4d58-8433-0c2ae016e9b5\" type=\"checkbox\" ><label for=\"7a2b67e5-affa-4d58-8433-0c2ae016e9b5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">OneHotEncoder</label><div class=\"sk-toggleable__content\"><pre>OneHotEncoder(handle_unknown=&#x27;ignore&#x27;)</pre></div></div></div></div></div></div></div></div></div></div></div></div>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 1: Decision Tree"
      ],
      "metadata": {
        "id": "_LlRVAr01dBh"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#initiate Decision Tree Model\n",
        "dec_tree = DecisionTreeClassifier(random_state=42, max_depth=5)\n",
        "dec_pipe = make_pipeline(preprocessor, dec_tree)\n",
        "dec_pipe.fit(X_train, y_train)\n",
        "\n",
        "test_pred = dec_pipe.predict(X_test)\n",
        "\n",
        "test_acc = classification_report(y_test, test_pred)\n",
        "print(test_acc)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7gvWtZh6FC6x",
        "outputId": "f1e2d3a0-f6cd-447f-c943-c333289c6edb"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    changing       0.00      0.00      0.00       558\n",
            "     chevron       0.00      0.00      0.00       232\n",
            "       cigar       0.00      0.00      0.00       497\n",
            "      circle       0.15      0.01      0.02      2512\n",
            "        cone       0.00      0.00      0.00        82\n",
            "       cross       0.00      0.00      0.00        78\n",
            "    cylinder       0.00      0.00      0.00       356\n",
            "     diamond       0.00      0.00      0.00       327\n",
            "        disk       0.21      0.13      0.16      1128\n",
            "         egg       0.00      0.00      0.00       153\n",
            "    fireball       0.17      0.04      0.06      1796\n",
            "       flash       0.00      0.00      0.00       370\n",
            "   formation       0.00      0.00      0.00       719\n",
            "       light       0.22      0.94      0.35      4526\n",
            "       other       0.00      0.00      0.00      1436\n",
            "        oval       0.00      0.00      0.00       989\n",
            "   rectangle       0.00      0.00      0.00       372\n",
            "      sphere       0.00      0.00      0.00      1501\n",
            "    teardrop       0.00      0.00      0.00       202\n",
            "    triangle       0.17      0.05      0.07      2020\n",
            "     unknown       0.50      0.00      0.00      1553\n",
            "\n",
            "    accuracy                           0.21     21407\n",
            "   macro avg       0.07      0.06      0.03     21407\n",
            "weighted avg       0.14      0.21      0.10     21407\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "dec_pipe.get_params()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Jxvcy0geFDXj",
        "outputId": "d2eb680c-050e-4163-d1ad-139ad4582ad1"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'memory': None,\n",
              " 'steps': [('columntransformer', ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                    Pipeline(steps=[('simpleimputer',\n",
              "                                                     SimpleImputer()),\n",
              "                                                    ('standardscaler',\n",
              "                                                     StandardScaler())]),\n",
              "                                    <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750>),\n",
              "                                   ('pipeline-2',\n",
              "                                    Pipeline(steps=[('simpleimputer',\n",
              "                                                     SimpleImputer(strategy='most_frequent')),\n",
              "                                                    ('onehotencoder',\n",
              "                                                     OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                    <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790>)])),\n",
              "  ('decisiontreeclassifier',\n",
              "   DecisionTreeClassifier(max_depth=5, random_state=42))],\n",
              " 'verbose': False,\n",
              " 'columntransformer': ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer()),\n",
              "                                                  ('standardscaler',\n",
              "                                                   StandardScaler())]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750>),\n",
              "                                 ('pipeline-2',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer(strategy='most_frequent')),\n",
              "                                                  ('onehotencoder',\n",
              "                                                   OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790>)]),\n",
              " 'decisiontreeclassifier': DecisionTreeClassifier(max_depth=5, random_state=42),\n",
              " 'columntransformer__n_jobs': None,\n",
              " 'columntransformer__remainder': 'drop',\n",
              " 'columntransformer__sparse_threshold': 0.3,\n",
              " 'columntransformer__transformer_weights': None,\n",
              " 'columntransformer__transformers': [('pipeline-1',\n",
              "   Pipeline(steps=[('simpleimputer', SimpleImputer()),\n",
              "                   ('standardscaler', StandardScaler())]),\n",
              "   <sklearn.compose._column_transformer.make_column_selector at 0x7fbe06e86750>),\n",
              "  ('pipeline-2',\n",
              "   Pipeline(steps=[('simpleimputer', SimpleImputer(strategy='most_frequent')),\n",
              "                   ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))]),\n",
              "   <sklearn.compose._column_transformer.make_column_selector at 0x7fbe06e86790>)],\n",
              " 'columntransformer__verbose': False,\n",
              " 'columntransformer__verbose_feature_names_out': True,\n",
              " 'columntransformer__pipeline-1': Pipeline(steps=[('simpleimputer', SimpleImputer()),\n",
              "                 ('standardscaler', StandardScaler())]),\n",
              " 'columntransformer__pipeline-2': Pipeline(steps=[('simpleimputer', SimpleImputer(strategy='most_frequent')),\n",
              "                 ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))]),\n",
              " 'columntransformer__pipeline-1__memory': None,\n",
              " 'columntransformer__pipeline-1__steps': [('simpleimputer', SimpleImputer()),\n",
              "  ('standardscaler', StandardScaler())],\n",
              " 'columntransformer__pipeline-1__verbose': False,\n",
              " 'columntransformer__pipeline-1__simpleimputer': SimpleImputer(),\n",
              " 'columntransformer__pipeline-1__standardscaler': StandardScaler(),\n",
              " 'columntransformer__pipeline-1__simpleimputer__add_indicator': False,\n",
              " 'columntransformer__pipeline-1__simpleimputer__copy': True,\n",
              " 'columntransformer__pipeline-1__simpleimputer__fill_value': None,\n",
              " 'columntransformer__pipeline-1__simpleimputer__missing_values': nan,\n",
              " 'columntransformer__pipeline-1__simpleimputer__strategy': 'mean',\n",
              " 'columntransformer__pipeline-1__simpleimputer__verbose': 0,\n",
              " 'columntransformer__pipeline-1__standardscaler__copy': True,\n",
              " 'columntransformer__pipeline-1__standardscaler__with_mean': True,\n",
              " 'columntransformer__pipeline-1__standardscaler__with_std': True,\n",
              " 'columntransformer__pipeline-2__memory': None,\n",
              " 'columntransformer__pipeline-2__steps': [('simpleimputer',\n",
              "   SimpleImputer(strategy='most_frequent')),\n",
              "  ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))],\n",
              " 'columntransformer__pipeline-2__verbose': False,\n",
              " 'columntransformer__pipeline-2__simpleimputer': SimpleImputer(strategy='most_frequent'),\n",
              " 'columntransformer__pipeline-2__onehotencoder': OneHotEncoder(handle_unknown='ignore'),\n",
              " 'columntransformer__pipeline-2__simpleimputer__add_indicator': False,\n",
              " 'columntransformer__pipeline-2__simpleimputer__copy': True,\n",
              " 'columntransformer__pipeline-2__simpleimputer__fill_value': None,\n",
              " 'columntransformer__pipeline-2__simpleimputer__missing_values': nan,\n",
              " 'columntransformer__pipeline-2__simpleimputer__strategy': 'most_frequent',\n",
              " 'columntransformer__pipeline-2__simpleimputer__verbose': 0,\n",
              " 'columntransformer__pipeline-2__onehotencoder__categories': 'auto',\n",
              " 'columntransformer__pipeline-2__onehotencoder__drop': None,\n",
              " 'columntransformer__pipeline-2__onehotencoder__dtype': numpy.float64,\n",
              " 'columntransformer__pipeline-2__onehotencoder__handle_unknown': 'ignore',\n",
              " 'columntransformer__pipeline-2__onehotencoder__sparse': True,\n",
              " 'decisiontreeclassifier__ccp_alpha': 0.0,\n",
              " 'decisiontreeclassifier__class_weight': None,\n",
              " 'decisiontreeclassifier__criterion': 'gini',\n",
              " 'decisiontreeclassifier__max_depth': 5,\n",
              " 'decisiontreeclassifier__max_features': None,\n",
              " 'decisiontreeclassifier__max_leaf_nodes': None,\n",
              " 'decisiontreeclassifier__min_impurity_decrease': 0.0,\n",
              " 'decisiontreeclassifier__min_samples_leaf': 1,\n",
              " 'decisiontreeclassifier__min_samples_split': 2,\n",
              " 'decisiontreeclassifier__min_weight_fraction_leaf': 0.0,\n",
              " 'decisiontreeclassifier__random_state': 42,\n",
              " 'decisiontreeclassifier__splitter': 'best'}"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#using GridSearchCV to maximize parameters \n",
        "param_grid = {'decisiontreeclassifier__max_depth': range(1,10),\n",
        "              'decisiontreeclassifier__min_samples_leaf': range(1, 5),\n",
        "              'decisiontreeclassifier__min_samples_split': range(2, 8)}\n",
        "\n",
        "dt_grid = GridSearchCV(dec_pipe, param_grid)\n",
        "dt_grid.fit(X_train, y_train)\n",
        "\n",
        "test_pred = dt_grid.predict(X_test)\n",
        "\n",
        "\n",
        "print(classification_report(y_test, test_pred))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "hmhnQw8IIW2u",
        "outputId": "a522b7a2-f9bc-456a-c9d7-9d485d9f48cd"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    changing       0.00      0.00      0.00       558\n",
            "     chevron       0.00      0.00      0.00       232\n",
            "       cigar       0.00      0.00      0.00       497\n",
            "      circle       0.00      0.00      0.00      2512\n",
            "        cone       0.00      0.00      0.00        82\n",
            "       cross       0.00      0.00      0.00        78\n",
            "    cylinder       0.00      0.00      0.00       356\n",
            "     diamond       0.00      0.00      0.00       327\n",
            "        disk       0.22      0.14      0.17      1128\n",
            "         egg       0.00      0.00      0.00       153\n",
            "    fireball       0.00      0.00      0.00      1796\n",
            "       flash       0.00      0.00      0.00       370\n",
            "   formation       0.00      0.00      0.00       719\n",
            "       light       0.22      0.96      0.35      4526\n",
            "       other       0.00      0.00      0.00      1436\n",
            "        oval       0.00      0.00      0.00       989\n",
            "   rectangle       0.00      0.00      0.00       372\n",
            "      sphere       0.00      0.00      0.00      1501\n",
            "    teardrop       0.00      0.00      0.00       202\n",
            "    triangle       0.17      0.05      0.07      2020\n",
            "     unknown       0.00      0.00      0.00      1553\n",
            "\n",
            "    accuracy                           0.22     21407\n",
            "   macro avg       0.03      0.05      0.03     21407\n",
            "weighted avg       0.07      0.22      0.09     21407\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 2 KNN"
      ],
      "metadata": {
        "id": "n8S0F-BZ1l7T"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "#initiate KNN model \n",
        "knn = KNeighborsClassifier()\n",
        "knn_pipe = make_pipeline(preprocessor, knn)\n",
        "knn_pipe.fit(X_train, y_train)\n",
        "\n",
        "test_pred = knn_pipe.predict(X_test)\n",
        "print(classification_report(y_test, test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "redmxEsvJuAd",
        "outputId": "5ba30a5c-577a-4332-b94f-e51321879c16"
      },
      "execution_count": 23,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    changing       0.04      0.08      0.05       558\n",
            "     chevron       0.03      0.07      0.04       232\n",
            "       cigar       0.03      0.07      0.05       497\n",
            "      circle       0.13      0.24      0.17      2512\n",
            "        cone       0.03      0.02      0.03        82\n",
            "       cross       0.00      0.00      0.00        78\n",
            "    cylinder       0.02      0.02      0.02       356\n",
            "     diamond       0.02      0.02      0.02       327\n",
            "        disk       0.10      0.10      0.10      1128\n",
            "         egg       0.05      0.03      0.04       153\n",
            "    fireball       0.13      0.15      0.14      1796\n",
            "       flash       0.07      0.04      0.05       370\n",
            "   formation       0.05      0.03      0.04       719\n",
            "       light       0.23      0.29      0.26      4526\n",
            "       other       0.08      0.04      0.05      1436\n",
            "        oval       0.06      0.02      0.03       989\n",
            "   rectangle       0.01      0.00      0.00       372\n",
            "      sphere       0.09      0.05      0.07      1501\n",
            "    teardrop       0.00      0.00      0.00       202\n",
            "    triangle       0.12      0.07      0.09      2020\n",
            "     unknown       0.09      0.04      0.05      1553\n",
            "\n",
            "    accuracy                           0.13     21407\n",
            "   macro avg       0.07      0.07      0.06     21407\n",
            "weighted avg       0.12      0.13      0.12     21407\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "knn_pipe.get_params()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "L-YsNomNNMQk",
        "outputId": "76327b69-3573-4ae5-d356-e90e0e6aae6e"
      },
      "execution_count": 24,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{'memory': None,\n",
              " 'steps': [('columntransformer', ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                    Pipeline(steps=[('simpleimputer',\n",
              "                                                     SimpleImputer()),\n",
              "                                                    ('standardscaler',\n",
              "                                                     StandardScaler())]),\n",
              "                                    <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750>),\n",
              "                                   ('pipeline-2',\n",
              "                                    Pipeline(steps=[('simpleimputer',\n",
              "                                                     SimpleImputer(strategy='most_frequent')),\n",
              "                                                    ('onehotencoder',\n",
              "                                                     OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                    <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790>)])),\n",
              "  ('kneighborsclassifier', KNeighborsClassifier())],\n",
              " 'verbose': False,\n",
              " 'columntransformer': ColumnTransformer(transformers=[('pipeline-1',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer()),\n",
              "                                                  ('standardscaler',\n",
              "                                                   StandardScaler())]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86750>),\n",
              "                                 ('pipeline-2',\n",
              "                                  Pipeline(steps=[('simpleimputer',\n",
              "                                                   SimpleImputer(strategy='most_frequent')),\n",
              "                                                  ('onehotencoder',\n",
              "                                                   OneHotEncoder(handle_unknown='ignore'))]),\n",
              "                                  <sklearn.compose._column_transformer.make_column_selector object at 0x7fbe06e86790>)]),\n",
              " 'kneighborsclassifier': KNeighborsClassifier(),\n",
              " 'columntransformer__n_jobs': None,\n",
              " 'columntransformer__remainder': 'drop',\n",
              " 'columntransformer__sparse_threshold': 0.3,\n",
              " 'columntransformer__transformer_weights': None,\n",
              " 'columntransformer__transformers': [('pipeline-1',\n",
              "   Pipeline(steps=[('simpleimputer', SimpleImputer()),\n",
              "                   ('standardscaler', StandardScaler())]),\n",
              "   <sklearn.compose._column_transformer.make_column_selector at 0x7fbe06e86750>),\n",
              "  ('pipeline-2',\n",
              "   Pipeline(steps=[('simpleimputer', SimpleImputer(strategy='most_frequent')),\n",
              "                   ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))]),\n",
              "   <sklearn.compose._column_transformer.make_column_selector at 0x7fbe06e86790>)],\n",
              " 'columntransformer__verbose': False,\n",
              " 'columntransformer__verbose_feature_names_out': True,\n",
              " 'columntransformer__pipeline-1': Pipeline(steps=[('simpleimputer', SimpleImputer()),\n",
              "                 ('standardscaler', StandardScaler())]),\n",
              " 'columntransformer__pipeline-2': Pipeline(steps=[('simpleimputer', SimpleImputer(strategy='most_frequent')),\n",
              "                 ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))]),\n",
              " 'columntransformer__pipeline-1__memory': None,\n",
              " 'columntransformer__pipeline-1__steps': [('simpleimputer', SimpleImputer()),\n",
              "  ('standardscaler', StandardScaler())],\n",
              " 'columntransformer__pipeline-1__verbose': False,\n",
              " 'columntransformer__pipeline-1__simpleimputer': SimpleImputer(),\n",
              " 'columntransformer__pipeline-1__standardscaler': StandardScaler(),\n",
              " 'columntransformer__pipeline-1__simpleimputer__add_indicator': False,\n",
              " 'columntransformer__pipeline-1__simpleimputer__copy': True,\n",
              " 'columntransformer__pipeline-1__simpleimputer__fill_value': None,\n",
              " 'columntransformer__pipeline-1__simpleimputer__missing_values': nan,\n",
              " 'columntransformer__pipeline-1__simpleimputer__strategy': 'mean',\n",
              " 'columntransformer__pipeline-1__simpleimputer__verbose': 0,\n",
              " 'columntransformer__pipeline-1__standardscaler__copy': True,\n",
              " 'columntransformer__pipeline-1__standardscaler__with_mean': True,\n",
              " 'columntransformer__pipeline-1__standardscaler__with_std': True,\n",
              " 'columntransformer__pipeline-2__memory': None,\n",
              " 'columntransformer__pipeline-2__steps': [('simpleimputer',\n",
              "   SimpleImputer(strategy='most_frequent')),\n",
              "  ('onehotencoder', OneHotEncoder(handle_unknown='ignore'))],\n",
              " 'columntransformer__pipeline-2__verbose': False,\n",
              " 'columntransformer__pipeline-2__simpleimputer': SimpleImputer(strategy='most_frequent'),\n",
              " 'columntransformer__pipeline-2__onehotencoder': OneHotEncoder(handle_unknown='ignore'),\n",
              " 'columntransformer__pipeline-2__simpleimputer__add_indicator': False,\n",
              " 'columntransformer__pipeline-2__simpleimputer__copy': True,\n",
              " 'columntransformer__pipeline-2__simpleimputer__fill_value': None,\n",
              " 'columntransformer__pipeline-2__simpleimputer__missing_values': nan,\n",
              " 'columntransformer__pipeline-2__simpleimputer__strategy': 'most_frequent',\n",
              " 'columntransformer__pipeline-2__simpleimputer__verbose': 0,\n",
              " 'columntransformer__pipeline-2__onehotencoder__categories': 'auto',\n",
              " 'columntransformer__pipeline-2__onehotencoder__drop': None,\n",
              " 'columntransformer__pipeline-2__onehotencoder__dtype': numpy.float64,\n",
              " 'columntransformer__pipeline-2__onehotencoder__handle_unknown': 'ignore',\n",
              " 'columntransformer__pipeline-2__onehotencoder__sparse': True,\n",
              " 'kneighborsclassifier__algorithm': 'auto',\n",
              " 'kneighborsclassifier__leaf_size': 30,\n",
              " 'kneighborsclassifier__metric': 'minkowski',\n",
              " 'kneighborsclassifier__metric_params': None,\n",
              " 'kneighborsclassifier__n_jobs': None,\n",
              " 'kneighborsclassifier__n_neighbors': 5,\n",
              " 'kneighborsclassifier__p': 2,\n",
              " 'kneighborsclassifier__weights': 'uniform'}"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "k_param_grid = {'kneighborsclassifier__leaf_size': range(25, 30),\n",
        "              'kneighborsclassifier__n_neighbors': range(5,10),\n",
        "              'kneighborsclassifier__p': range(2,4)}\n",
        "knn_grid = GridSearchCV(knn_pipe, k_param_grid)\n",
        "knn_grid.fit(X_train, y_train)\n",
        "\n",
        "test_pred = knn_grid.predict(X_test)\n",
        "\n",
        "print(classification_report(y_test, test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "AfGrHpVUNW_G",
        "outputId": "0b43e479-fdd6-422a-f11a-7cfa857ce6ce"
      },
      "execution_count": 26,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py:372: FitFailedWarning: \n",
            "125 fits failed out of a total of 250.\n",
            "The score on these train-test partitions for these parameters will be set to nan.\n",
            "If these failures are not expected, you can try to debug them by setting error_score='raise'.\n",
            "\n",
            "Below are more details about the failures:\n",
            "--------------------------------------------------------------------------------\n",
            "125 fits failed with the following error:\n",
            "Traceback (most recent call last):\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\", line 680, in _fit_and_score\n",
            "    estimator.fit(X_train, y_train, **fit_params)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/pipeline.py\", line 394, in fit\n",
            "    self._final_estimator.fit(Xt, y, **fit_params_last_step)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_classification.py\", line 198, in fit\n",
            "    return self._fit(X, y)\n",
            "  File \"/usr/local/lib/python3.7/dist-packages/sklearn/neighbors/_base.py\", line 513, in _fit\n",
            "    \"Metric can also be a callable function.\" % (self.effective_metric_)\n",
            "ValueError: Metric 'minkowski' not valid for sparse input. Use sorted(sklearn.neighbors.VALID_METRICS_SPARSE['brute']) to get valid options. Metric can also be a callable function.\n",
            "\n",
            "  warnings.warn(some_fits_failed_message, FitFailedWarning)\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py:972: UserWarning: One or more of the test scores are non-finite: [0.1305668         nan 0.13881968        nan 0.14450327        nan\n",
            " 0.14919028        nan 0.15213329        nan 0.1305668         nan\n",
            " 0.13881968        nan 0.14450327        nan 0.14919028        nan\n",
            " 0.15213329        nan 0.1305668         nan 0.13881968        nan\n",
            " 0.14450327        nan 0.14919028        nan 0.15213329        nan\n",
            " 0.1305668         nan 0.13881968        nan 0.14450327        nan\n",
            " 0.14919028        nan 0.15213329        nan 0.1305668         nan\n",
            " 0.13881968        nan 0.14450327        nan 0.14919028        nan\n",
            " 0.15213329        nan]\n",
            "  category=UserWarning,\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    changing       0.03      0.03      0.03       558\n",
            "     chevron       0.05      0.03      0.03       232\n",
            "       cigar       0.03      0.02      0.03       497\n",
            "      circle       0.13      0.24      0.17      2512\n",
            "        cone       0.00      0.00      0.00        82\n",
            "       cross       0.00      0.00      0.00        78\n",
            "    cylinder       0.02      0.01      0.01       356\n",
            "     diamond       0.02      0.01      0.01       327\n",
            "        disk       0.11      0.11      0.11      1128\n",
            "         egg       0.00      0.00      0.00       153\n",
            "    fireball       0.14      0.18      0.15      1796\n",
            "       flash       0.05      0.02      0.03       370\n",
            "   formation       0.03      0.01      0.02       719\n",
            "       light       0.22      0.39      0.29      4526\n",
            "       other       0.09      0.05      0.06      1436\n",
            "        oval       0.07      0.02      0.03       989\n",
            "   rectangle       0.01      0.00      0.00       372\n",
            "      sphere       0.08      0.04      0.05      1501\n",
            "    teardrop       0.00      0.00      0.00       202\n",
            "    triangle       0.12      0.07      0.09      2020\n",
            "     unknown       0.09      0.03      0.05      1553\n",
            "\n",
            "    accuracy                           0.15     21407\n",
            "   macro avg       0.06      0.06      0.06     21407\n",
            "weighted avg       0.12      0.15      0.12     21407\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 3"
      ],
      "metadata": {
        "id": "iPag8UM1RXvl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "lg = LogisticRegression(C=1000)\n",
        "lg_pipe = make_pipeline(preprocessor, lg)\n",
        "lg_pipe.fit(X_train, y_train)\n",
        "\n",
        "test_pred = lg_pipe.predict(X_test)\n",
        "\n",
        "print(classification_report(y_test, test_pred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "20-tk0yORXbh",
        "outputId": "0ae69c83-3b73-4595-c7d2-8addbddca006"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:818: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
            "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
            "\n",
            "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
            "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
            "Please also refer to the documentation for alternative solver options:\n",
            "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
            "  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG,\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n",
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "              precision    recall  f1-score   support\n",
            "\n",
            "    changing       0.00      0.00      0.00       558\n",
            "     chevron       0.00      0.00      0.00       232\n",
            "       cigar       0.00      0.00      0.00       497\n",
            "      circle       0.40      0.00      0.00      2512\n",
            "        cone       0.00      0.00      0.00        82\n",
            "       cross       0.00      0.00      0.00        78\n",
            "    cylinder       0.00      0.00      0.00       356\n",
            "     diamond       0.00      0.00      0.00       327\n",
            "        disk       0.19      0.08      0.11      1128\n",
            "         egg       0.00      0.00      0.00       153\n",
            "    fireball       0.00      0.00      0.00      1796\n",
            "       flash       0.00      0.00      0.00       370\n",
            "   formation       0.00      0.00      0.00       719\n",
            "       light       0.21      0.98      0.35      4526\n",
            "       other       0.09      0.00      0.00      1436\n",
            "        oval       0.00      0.00      0.00       989\n",
            "   rectangle       0.00      0.00      0.00       372\n",
            "      sphere       0.12      0.00      0.00      1501\n",
            "    teardrop       0.00      0.00      0.00       202\n",
            "    triangle       0.12      0.01      0.01      2020\n",
            "     unknown       0.00      0.00      0.00      1553\n",
            "\n",
            "    accuracy                           0.21     21407\n",
            "   macro avg       0.05      0.05      0.02     21407\n",
            "weighted avg       0.13      0.21      0.08     21407\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1318: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n",
            "  _warn_prf(average, modifier, msg_start, len(result))\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "c_values = [0.0001, 0.001, 0.01, 0.1, 1, 10, 100, 1000]\n",
        "train_scores = []\n",
        "test_scores = []\n",
        "\n",
        "for c in c_values:\n",
        "  log_reg = LogisticRegression(C=c, max_iter=1000, solver='liblinear', penalty='l1')\n",
        "  log_reg_pipe = make_pipeline(preprocessor, log_reg)\n",
        "  log_reg_pipe.fit(X_train, y_train)\n",
        "\n",
        "  train_scores.append(log_reg_pipe.score(X_train, y_train))\n",
        "  test_scores.append(log_reg_pipe.score(X_test, y_test))\n",
        "\n",
        "{c:score for c, score in zip(c_values, test_scores)}\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "TBE6HH899GPx",
        "outputId": "26cc6db5-9508-4f21-dad1-9666a987081d"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "{0.0001: 0.21142616901013686,\n",
              " 0.001: 0.21142616901013686,\n",
              " 0.01: 0.21366842621572382,\n",
              " 0.1: 0.2133414303732424,\n",
              " 1: 0.21301443453076097,\n",
              " 10: 0.21292100714719484,\n",
              " 100: 0.21287429345541178,\n",
              " 1000: 0.21287429345541178}"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Model 1 has the best Accuracy, however none are particularly high. Most liekly due to limited features and class imbalance for Shape feature."
      ],
      "metadata": {
        "id": "dDKqBIh1aXCa"
      }
    }
  ]
}